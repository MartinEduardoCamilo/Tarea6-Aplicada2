@page "/Ordenes"
@page "/Ordenes/{OrdenId:int}"

@using SuplidoresBlazor.BLL
@using SuplidoresBlazor.Models

@inject IToastService toast


    <EditForm Model="ordenes" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />

        <section class="form-register">
            <div class="card">

                <div class="card-header">
                    <h3>Registro de Ordenes</h3>
                </div>

                <div class="card-body">
                    <form>
                        <div class="form-row align-items-center">
                            <div class="col">
                                <div class="form-group">
                                    <label>ID:</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="ordenes.ordenId" class="form-control col-4" />
                                        <ValidationMessage For="(() => ordenes.ordenId)"></ValidationMessage>
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="fa fa-search"> Buscar </i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @*Fecha*@
                        <div class="form-group">
                            <label>Fecha:</label>
                            <InputDate @bind-Value="ordenes.fecha" class="form-control" />
                            <ValidationMessage For="@(() => ordenes.fecha)" />
                        </div>

                        @*Suplidor*@
                        <div class="form-group">
                            <label>Suplidor:</label>
                            <select class="form-control" @bind="ordenes.suplidorId">
                                @foreach (var item in Suplidores)
                                {
                                    <option value="@item.suplidorId">@item.nombre</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => ordenes.suplidorId)" />
                        </div>

                        <div class="form-group">
                            <div class="form-row">
                                @*Producto*@
                                <div class="col">
                                    <label>Producto:</label>
                                    <select class="form-control" @bind="SeleccionarProducto" @onclick="BuscarCosto">
                                        @foreach (var item in Productos)
                                        {
                                            <option value="@item.productoId">@item.descripcion</option>
                                        }
                                    </select>
                                </div>
                                @*Costo*@
                                <div class="col">
                                    <label>Costo:</label>
                                    <InputNumber class="form-control" @bind-Value="Costo" readonly="true" />
                                </div>
                                @*Cantidad*@
                                <div class="col">
                                    <label>Cantidad:</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="AgregarCantidad" class="form-control" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-info" @onclick="Agregar"><i class="fa fa-plus"> Agregar </i></button>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        @*Detalle*@
                        <div class="table-responsive text-nowrap">
                            <table class="table table-striped">
                                <thead class="thead-light">
                                    <tr>             
                                        <th>Cantidad</th>
                                        <th>Costo</th>
                                        <th>Descripción</th>
                                        <th>Importe</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white">
                                    @foreach (var item in ordenes.OrdenDetalles)
                                    {
                                        <tr>                                        
                                            <td>@item.cantidad</td>
                                            <td>@item.costo</td>
                                            <td>@item.Descripcion</td>
                                            <td>@item.Importe</td>
                                            <td><button type="button" class="btn btn-outline-danger" @onclick="(() => EliminarOrdenDetalle(item))">Remover</button></td>
                                        </tr>
                                    }

                                </tbody>

                            </table>
                        </div>

                        @*Total*@
                        <div class="form-group">
                            <label>Monto:</label>
                            <InputNumber @bind-Value="ordenes.monto" class="form-control" readonly="true" />
                            <ValidationMessage For="@(() => ordenes.monto)" />
                        </div>

                    </form>
                </div>

                <div class="card-footer">
                    <div class="form-group text-center" display: inline-block>
                        <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="fa fa-plus"> Nuevo </i></button>
                        <button type="submit" class="btn btn-lg btn-success"><i class="fa fa-save"> Guardar </i></button>
                        <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="fa fa-trash"> Eliminar </i></button>
                    </div>
                </div>

            </div>
        </section>

    </EditForm>


@code {

    [Parameter]
    public int OrdenId { get; set; }

    public int AgregarCantidad { get; set; }
    public int SeleccionarProducto { get; set; }
    public decimal Costo { get; set; }

    Ordenes ordenes = new Ordenes();
    List<Suplidores> Suplidores = new List<Suplidores>();
    List<Productos> Productos = new List<Productos>();

    protected override void OnInitialized()
    {
        Nuevo();
        if (OrdenId > 0)
        {
            var auxOrden = OrdenesBLL.Buscar(OrdenId);
            if (auxOrden != null)
                this.ordenes = auxOrden;
            else
                toast.ShowWarning("No encontrado.");
        }

        Suplidores = SuplidoresBLL.GetList(p => true);
        Productos = ProductosBLL.GetList(p => true);
    }

    private void Buscar()
    {
        var encontrado = OrdenesBLL.Buscar(ordenes.ordenId);
        if (encontrado != null)
        {
            this.ordenes = encontrado;
        }
        else
            toast.ShowWarning("No encontrado");

    }

    private void Nuevo()
    {
        this.ordenes = new Ordenes();
        AgregarCantidad = 0;
        SeleccionarProducto = 0;
        Costo = 0;

    }


    private void Guardar()
    {
        bool paso;
        if (ordenes.OrdenDetalles.Count == 0)
        {
            toast.ShowWarning("Tienes que agregar al menos un elemento a la lista", "Lista Vacía!");
            return;
        }
        else
        {
            paso = OrdenesBLL.Guardar(ordenes);

            if (paso)
            {
                Nuevo();
                toast.ShowSuccess("Guardado correctamente");
            }
            else
            {
                toast.ShowError("No fue posible guardar");
            }
        }

    }

    private void Eliminar()
    {
        bool elimino;

        elimino = OrdenesBLL.Eliminar(ordenes.ordenId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private void BuscarCosto()
    {
        var auxProducto = ProductosBLL.Buscar(SeleccionarProducto);
        if (auxProducto != null)
        {
            Costo = auxProducto.costo;
        }

    }

    private void Agregar()
    {
        if (SeleccionarProducto == 0)
        {
            toast.ShowWarning("Tiene que seleccionar un producto.");
            return;
        }

        if (AgregarCantidad <= 0)
        {
            toast.ShowWarning("La cantidad debe ser mayor a 0.");
            return;
        }
        else
        {
            this.ordenes.OrdenDetalles.Add(new OrdenesDetalle
            {
                ordenDetalleId = 0,
                productoId = SeleccionarProducto,
                costo = Costo,
                cantidad = AgregarCantidad,
                Descripcion = ProductosBLL.Buscar(SeleccionarProducto).descripcion,
                Importe = Convert.ToDecimal(Costo * AgregarCantidad)
            });

            SeleccionarProducto = 0;
            Costo = 0;
            AgregarCantidad = 0;

        }
        CalcularMonto();

    }

    private void CalcularMonto()
    {
        decimal total = 0;
        foreach (var item in ordenes.OrdenDetalles)
        {
            total += (item.costo * item.cantidad);
        }
        ordenes.monto = total;
    }

    private void EliminarOrdenDetalle(OrdenesDetalle detalle)
    {
        try
        {
            ordenes.OrdenDetalles.Remove(detalle);
            CalcularMonto();
        }
        catch (Exception)
        {

            throw;
        }
    }

}
